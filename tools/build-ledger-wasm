#!/bin/bash
#
# Build the ledger code as Wasm and prepare it for parity ethereum.
#
# Creates ./target/oscoin_ledger.wasm.
#

set -euo pipefail

project_root=$(dirname $BASH_SOURCE)/..

# Rust flags to make the Wasm output small.
rust_flags="${RUSTFLAGS:-""}"
rust_flags+=" -C panic=abort"
rust_flags+=" -C lto=yes"
rust_flags+=" -C opt-level=z"
# Restricting the stack-size limits the initial memory size and memory
# requirements. The code cannot run on chain otherwise and `wasm-build`
# produces invalid Wasm.
rust_flags+=" -C link-args=-zstack-size=65536"

# NOTE: We cannot use `cargo build --project oscoin_ledger` because
# `--no-default-features` is not respected.
# See https://github.com/rust-lang/cargo/issues/5015
RUSTFLAGS=$rust_flags\
  cargo build \
  --manifest-path $project_root/ledger/Cargo.toml \
  --no-default-features \
  --release \
  --target wasm32-unknown-unknown

wasm-build --target=wasm32-unknown-unknown ./target oscoin_ledger

if which wasm2wat >/dev/null 2>&1 ; then
  wasm2wat \
    ./target/wasm32-unknown-unknown/release/oscoin_ledger.wasm \
    > ./target/wasm32-unknown-unknown/release/oscoin_ledger.wat
  wasm2wat ./target/oscoin_ledger.wasm > ./target/oscoin_ledger.wat
fi
